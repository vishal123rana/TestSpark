[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\VISHAL~1\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\VISHAL~1\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.4 (Oracle Corporation Java 1.8.0_211)
[debug]       Load.loadUnit: plugins took 304.6314ms
[debug]       Load.loadUnit: defsScala took 0.6225ms
[debug] [Loading] Scanning directory C:\Users\vishal rana\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\vishal rana\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 48.2672 ms
[debug]           Load.resolveProject(global-plugins) took 145.854ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\vishal rana\.sbt\1.0\plugins, plugins: List(<none>))) took 293.9933ms
[debug] [Loading] Done in C:\Users\vishal rana\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 356.8532ms
[debug]       Load.loadUnit: cleanEvalClasses took 1.1289ms
[debug]     Load.loadUnit(file:/C:/Users/vishal%20rana/.sbt/1.0/plugins/, ...) took 680.5988ms
[debug]   Load.apply: load took 1763.5548ms
[debug]   Load.apply: resolveProjects took 19.9494ms
[debug]   Load.apply: finalTransforms took 274.7148ms
[debug]   Load.apply: config.delegates took 80.2574ms
[debug]   Load.apply: Def.make(settings)... took 925.7508ms
[debug]   Load.apply: structureIndex took 295.3749ms
[debug]   Load.apply: mkStreams took 3.1586ms
[info] loading global plugins from C:\Users\vishal rana\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 8334.7267ms
[debug]           Load.loadUnit: plugins took 62.423ms
[debug]           Load.loadUnit: defsScala took 0.0119ms
[debug] [Loading] Scanning directory C:\Users\vishal rana\IdeaProjects\TestSpark\project
[debug]             Load.loadUnit: mkEval took 13.4905ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\vishal rana\IdeaProjects\TestSpark\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 6.5714 ms
[info] loading settings for project testspark-build from idea.sbt ...
[debug]               Load.resolveProject(testspark-build) took 9.5841ms
[debug]             Load.loadTransitive: finalizeProject(Project(id testspark-build, base: C:\Users\vishal rana\IdeaProjects\TestSpark\project, plugins: List(<none>))) took 17.6573ms
[debug] [Loading] Done in C:\Users\vishal rana\IdeaProjects\TestSpark\project, returning: (testspark-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 5551.4441ms
[debug]           Load.loadUnit: cleanEvalClasses took 13.9828ms
[debug]         Load.loadUnit(file:/C:/Users/vishal%20rana/IdeaProjects/TestSpark/project/, ...) took 5630.1311ms
[debug]       Load.apply: load took 5633.3547ms
[debug]       Load.apply: resolveProjects took 0.2329ms
[debug]       Load.apply: finalTransforms took 28.5636ms
[debug]       Load.apply: config.delegates took 0.627ms
[debug]       Load.apply: Def.make(settings)... took 523.159ms
[debug]       Load.apply: structureIndex took 93.4329ms
[debug]       Load.apply: mkStreams took 0.003ms
[info] loading project definition from C:\Users\vishal rana\IdeaProjects\TestSpark\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 44361.7711ms
[debug]     Load.loadUnit: defsScala took 0.0045ms
[debug] [Loading] Scanning directory C:\Users\vishal rana\IdeaProjects\TestSpark
[debug]       Load.loadUnit: mkEval took 0.4321ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\vishal rana\IdeaProjects\TestSpark, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.2202 ms
[info] loading settings for project testspark from build.sbt ...
[debug]         Load.resolveProject(testspark) took 299.8423ms
[debug]       Load.loadTransitive: finalizeProject(Project(id testspark, base: C:\Users\vishal rana\IdeaProjects\TestSpark, plugins: List(<none>))) took 305.1376ms
[debug] [Loading] Done in C:\Users\vishal rana\IdeaProjects\TestSpark, returning: (testspark)
[debug]     Load.loadUnit: loadedProjectsRaw took 1874.7652ms
[debug]     Load.loadUnit: cleanEvalClasses took 15.7346ms
[debug]   Load.loadUnit(file:/C:/Users/vishal%20rana/IdeaProjects/TestSpark/, ...) took 46253.2106ms
[debug] Load.apply: load took 46255.4664ms
[debug] Load.apply: resolveProjects took 0.1821ms
[debug] Load.apply: finalTransforms took 59.4638ms
[debug] Load.apply: config.delegates took 0.3955ms
[debug] Load.apply: Def.make(settings)... took 141.9699ms
[debug] Load.apply: structureIndex took 31.466ms
[debug] Load.apply: mkStreams took 0.0027ms
[info] set current project to TestSpark (in build file:/C:/Users/vishal%20rana/IdeaProjects/TestSpark/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 53099 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 53099, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to TestSpark (in build file:/C:/Users/vishal%20rana/IdeaProjects/TestSpark/)
[debug] > Exec(idea-shell, None, None)
